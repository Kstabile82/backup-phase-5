exit
if alreadyexists
            ur = alreadyexists.update(userrescue_id: params[:userrescue_id], information_id: params[:testArr][0][:info_id], score: score) end
if alreadyexists
            ur = alreadyexists.update(userrescue_id: params[:userrescue_id], information_id: params[:testArr][:info_id], score: score)
        else 
        ur = Userresult.create(userrescue_id: params[:userrescue_id], information_id: params[:testArr][:info_id], score: score)
        end
        alreadyexists = Userresult.find_by(information_id: params[:testArr][0][:info_id])
params[:testArr][0][:info_id]
params[:testArr][0][:input]
params[:testArr[0][:info_id]]
params[:testArr[0][:info_id]
params[:testArr[0]]
params[:testArr][0[:info_id].to_i]
params[:testArr][0[:info_id]]
params[:testArr][0]
params[:testArr][0][0]
params[:testArr][0][0
params[:testArr][0][info_id]
params[:testArr][0]
params[:testArr][0][info_id].to_i
params[:testArr]
params[:testArr][0][info_id]
params[:testArr].info_id
params[:testArr]
params[:testArr][:info_id]
 alreadyexists = Userresult.find_by(information_id: params[:testArr][:info_id].to_i)
 alreadyexists = Userresult.find_by(information_id: params[:testArr][:info_id])
 arr = params[:testArr]
        score = 0; 
        inp = params[:testArr].map do |t| 
            if t[:input] == t[:correct_answer] 
                score = score + 1
            else 
                score = score
            end
        end
 arr = params[:testArr]
        score = 0; 
        inp = params[:testArr].map do |t| 
            if t[:input] == t[:correct_answer] 
                score = score + 1
            else 
                score = score
            end
        end arr = params[:testArr]
        score = 0; 
        inp = params[:testArr].map do |t| 
            if t[:input] == t[:correct_answer] 
                score = score + 1
            else 
                score = score
            end
        end
      arr = params[:testArr]
        score = 0; 
        inp = params[:testArr].map do |t| 
            if t[:input] == t[:correct_answer] 
                score = score + 1
            else 
                score = score
            end
        end
        alreadyexists = Userresult.find_by(information_id: params[:testArr][0][:infoId].to_i)
        if alreadyexists
            ur = alreadyexists.update(userrescue_id: params[:userrescue_id], information_id: params[:testArr][:info_id], score: score)
        else 
        ur = Userresult.create(userrescue_id: params[:userrescue_id], information_id: params[:testArr][:info_id], score: score)
        end
        render json: ur
  arr = params[:testArr]
        score = 0; 
        inp = params[:testArr].map do |t| 
            if t[:input] == t[:correct_answer] 
                score = score + 1
            else 
                score = score
            end
        end
        alreadyexists = Userresult.find_by(information_id: params[:testArr][0][:infoId].to_i)
        if alreadyexists
            ur = alreadyexists.update(userrescue_id: params[:userrescue_id].to_i, information_id: params[:testArr][:info_id].to_i, score: score)
        else 
        ur = Userresult.create(userrescue_id: params[:userrescue_id].to_i, information_id: params[:testArr][:info_id].to_i, score: score)
        end
        render json: ur
params[:testArr]
params[:testArr][0]
alreadyExists
alreadyexists = Userresult.find_by(information_id: params[:testArr][0][:infoId].to_i)
params[:corr]
corr
score
 inp = params[:testArr].map do |t| 
            if t[:input] == t[:correct_answer] 
                score = score + 1
            else 
                score = score
            end
        end
score = 0
params[:testArr]
arr = params[:testArr]
        score = 0; 
        inp = params[:testArr].map do |t| 
            if t[:input] == t[:answer] 
                score = score + 1
            else 
                score = score
            end end
arr = params[:testArr]
        score = 0; 
        inp = params[:testArr].map do |t| 
            if t[:input] == t[:answer] 
                score = score + 1
            else 
                score = score
            end
params
exit
opt = Option.find(params[:id])
exit
corr = nil
        quest = Question.find(params[:question_id])
        corr = quest.options.find_by("correct" === true)
        if params[:correct] === true && corr != nil 
          render json: { message: "You already have a correct answer for this question, you must delete that one before you can add this as the answer." }, status: :unauthorized
        else 
          opt = Option.create!(option_params)
          render json: opt
        end
exit
