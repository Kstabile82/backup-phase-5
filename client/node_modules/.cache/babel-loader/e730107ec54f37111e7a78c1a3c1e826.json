{"ast":null,"code":"var _jsxFileName = \"/Users/kstabile/backup-phase-5/client/src/Components/Form.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form(_ref) {\n  _s();\n  let {\n    qs,\n    i,\n    testArr,\n    setTestArr\n  } = _ref;\n  const [obj, setObj] = useState(null);\n  const [selected, setSelected] = useState(\"yes\");\n  let obJ = {};\n  let thisValue;\n  function handleTestInput(e, q) {\n    e.preventDefault();\n    console.log(e.target.value);\n    let inputQ;\n    let inputVal;\n    let correctAns;\n    let questionId;\n    let infoId = i.id;\n    setChecked();\n    e.target.checked = !e.target.checked;\n    inputQ = e.target.name;\n    inputVal = e.target.value;\n    correctAns = q.options.find(o => o.correct);\n    questionId = q.id;\n    setObj({\n      \"question_id\": questionId,\n      \"info_id\": infoId,\n      \"question\": inputQ,\n      \"input\": inputVal,\n      \"correct_answer\": correctAns.text\n    });\n  }\n  function handleSubmitClicked(e, q) {\n    e.preventDefault();\n    let alreadyExists = testArr.find(tA => tA.question_id === obj.question_id);\n    if (alreadyExists) {\n      let idx = testArr.indexOf(alreadyExists);\n      testArr.splice(idx, 1, obj);\n      setTestArr(testArr);\n    } else {\n      setTestArr([...testArr, obj]);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: qs.map(q => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmitClicked(e, q),\n        children: [q.text, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), q.options.map(o => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [o.text, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: q.text,\n            value: o.text,\n            checked: selected === \"yes\",\n            onChange: e => handleTestInput(e, q)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(Form, \"ar7oKjebRI1B/VcKNJl3pOOfzVg=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Form","qs","i","testArr","setTestArr","obj","setObj","selected","setSelected","obJ","thisValue","handleTestInput","e","q","preventDefault","console","log","target","value","inputQ","inputVal","correctAns","questionId","infoId","id","setChecked","checked","name","options","find","o","correct","text","handleSubmitClicked","alreadyExists","tA","question_id","idx","indexOf","splice","map"],"sources":["/Users/kstabile/backup-phase-5/client/src/Components/Form.js"],"sourcesContent":["import React, { useState } from \"react\"; \n\nfunction Form({ qs, i, testArr, setTestArr }){\n    const [obj, setObj] = useState(null)\n    const [selected, setSelected] = useState(\"yes\")\n\n    let obJ = {}\n    let thisValue;\n\n    function handleTestInput(e, q) {\n        e.preventDefault();\n        console.log(e.target.value)\n        let inputQ; \n        let inputVal;\n        let correctAns;\n        let questionId; \n        let infoId = i.id\n        setChecked()\n        e.target.checked = !e.target.checked\n        inputQ = e.target.name\n        inputVal = e.target.value\n        correctAns = q.options.find(o => o.correct)  \n        questionId = q.id \n       setObj({\"question_id\": questionId, \"info_id\": infoId, \"question\": inputQ, \"input\": inputVal, \"correct_answer\": correctAns.text})\n    }\n    function handleSubmitClicked(e, q) {\n        e.preventDefault();\n        let alreadyExists = testArr.find(tA => tA.question_id === obj.question_id)\n        if (alreadyExists) {\n            let idx = testArr.indexOf(alreadyExists)\n            testArr.splice(idx,1,obj)\n            setTestArr(testArr)\n        }\n        else {\n            setTestArr([...testArr, obj])\n        }\n    }\n\n    return (\n        <div>\n            {qs.map(q => \n                <div><form onSubmit={(e) => handleSubmitClicked(e, q)}>{q.text}\n                <br></br>\n                {q.options.map(o => \n                    <label>{o.text}\n                    <input\n                    type=\"radio\"\n                    name={q.text}\n                    value={o.text}\n                    checked={selected === \"yes\"}\n                    onChange={(e) => handleTestInput(e, q)}\n                    >\n                    </input></label>)}\n                    <button>Enter</button><br></br>\n                   \n\n                </form> \n                <br></br>\n                 </div>\n            )}\n   </div>\n    )\n}\n\nexport default Form;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,SAASC,IAAI,OAAgC;EAAA;EAAA,IAA/B;IAAEC,EAAE;IAAEC,CAAC;IAAEC,OAAO;IAAEC;EAAW,CAAC;EACxC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/C,IAAIU,GAAG,GAAG,CAAC,CAAC;EACZ,IAAIC,SAAS;EAEb,SAASC,eAAe,CAACC,CAAC,EAAEC,CAAC,EAAE;IAC3BD,CAAC,CAACE,cAAc,EAAE;IAClBC,OAAO,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC;IAC3B,IAAIC,MAAM;IACV,IAAIC,QAAQ;IACZ,IAAIC,UAAU;IACd,IAAIC,UAAU;IACd,IAAIC,MAAM,GAAGrB,CAAC,CAACsB,EAAE;IACjBC,UAAU,EAAE;IACZb,CAAC,CAACK,MAAM,CAACS,OAAO,GAAG,CAACd,CAAC,CAACK,MAAM,CAACS,OAAO;IACpCP,MAAM,GAAGP,CAAC,CAACK,MAAM,CAACU,IAAI;IACtBP,QAAQ,GAAGR,CAAC,CAACK,MAAM,CAACC,KAAK;IACzBG,UAAU,GAAGR,CAAC,CAACe,OAAO,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC;IAC3CT,UAAU,GAAGT,CAAC,CAACW,EAAE;IAClBlB,MAAM,CAAC;MAAC,aAAa,EAAEgB,UAAU;MAAE,SAAS,EAAEC,MAAM;MAAE,UAAU,EAAEJ,MAAM;MAAE,OAAO,EAAEC,QAAQ;MAAE,gBAAgB,EAAEC,UAAU,CAACW;IAAI,CAAC,CAAC;EACnI;EACA,SAASC,mBAAmB,CAACrB,CAAC,EAAEC,CAAC,EAAE;IAC/BD,CAAC,CAACE,cAAc,EAAE;IAClB,IAAIoB,aAAa,GAAG/B,OAAO,CAAC0B,IAAI,CAACM,EAAE,IAAIA,EAAE,CAACC,WAAW,KAAK/B,GAAG,CAAC+B,WAAW,CAAC;IAC1E,IAAIF,aAAa,EAAE;MACf,IAAIG,GAAG,GAAGlC,OAAO,CAACmC,OAAO,CAACJ,aAAa,CAAC;MACxC/B,OAAO,CAACoC,MAAM,CAACF,GAAG,EAAC,CAAC,EAAChC,GAAG,CAAC;MACzBD,UAAU,CAACD,OAAO,CAAC;IACvB,CAAC,MACI;MACDC,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEE,GAAG,CAAC,CAAC;IACjC;EACJ;EAEA,oBACI;IAAA,UACKJ,EAAE,CAACuC,GAAG,CAAC3B,CAAC,iBACL;MAAA,wBAAK;QAAM,QAAQ,EAAGD,CAAC,IAAKqB,mBAAmB,CAACrB,CAAC,EAAEC,CAAC,CAAE;QAAA,WAAEA,CAAC,CAACmB,IAAI,eAC9D;UAAA;UAAA;UAAA;QAAA,QAAS,EACRnB,CAAC,CAACe,OAAO,CAACY,GAAG,CAACV,CAAC,iBACZ;UAAA,WAAQA,CAAC,CAACE,IAAI,eACd;YACA,IAAI,EAAC,OAAO;YACZ,IAAI,EAAEnB,CAAC,CAACmB,IAAK;YACb,KAAK,EAAEF,CAAC,CAACE,IAAK;YACd,OAAO,EAAEzB,QAAQ,KAAK,KAAM;YAC5B,QAAQ,EAAGK,CAAC,IAAKD,eAAe,CAACC,CAAC,EAAEC,CAAC;UAAE;YAAA;YAAA;YAAA;UAAA,QAE/B;QAAA;UAAA;UAAA;UAAA;QAAA,QAAQ,CAAC,eACjB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAsB;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QAG5B,eACP;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EACV;IAAA;IAAA;IAAA;EAAA,QACJ;AAET;AAAC,GA5DQb,IAAI;AAAA,KAAJA,IAAI;AA8Db,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}