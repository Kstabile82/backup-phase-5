{"ast":null,"code":"var _jsxFileName = \"/Users/kstabile/backup-phase-5/client/src/Components/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n// import Options from \"./Options\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Questions(_ref) {\n  _s();\n  let {\n    i,\n    setI\n  } = _ref;\n  const [addQs, setAddQs] = useState(false);\n  const [qs, setQs] = useState(i.questions);\n\n  // function handleUpdate(e){\n  //     e.preventDefault();\n  //     // fetch(`/questions/${q.id}`, {\n  //     //     method: \"PATCH\",\n  //     //     headers: {\n  //     //         \"Content-Type\": \"application/json\",\n  //     //     },\n  //     //     body: JSON.stringify({ q }),\n  //     // })\n  //     // .then((r) => r.json())\n  //     // .then((updatedQ) => setQ([...questions.filter(quest => quest.id !== updatedQ.id), updatedQ]))\n  // }\n  // function handleDelete(e){\n  //     e.preventDefault();\n  //     // fetch(`/questions/${q.id}`, { \n  //     //     method: 'DELETE'\n  //     // })\n  //     // setQ(questions.filter(quest => quest.id !== q.id))\n  // }\n  function handlePostQ(e) {\n    e.preventDefault();\n    // let questiontext = qText\n    // let information_id = i.id\n    // fetch(`/newquestion`, {\n    //     method: \"POST\", \n    //     headers: {\n    //         \"Content-Type\": \"application/json\"\n    //     },\n    //     body: JSON.stringify({ information_id, questiontext }),\n    // })\n    // .then((r) => r.json())\n    // .then((newQ) => {\n    //     if (questions.length > 0) {\n    //         setQuestions([...questions, newQ])\n    //         //make sure this renders right away == may need a callback fn from Adminpage\n    //     }\n    //     else {\n    //         setQuestions(newQ)\n    //     }\n    //     setAddQs(false)\n    // })\n  }\n\n  function handleNewQInput(e) {\n    e.preventDefault();\n    if (e.target.defaultValue === \"text\") {\n      qText = e.target.value;\n    }\n    if (e.target.defaultValue === \"correct\") {\n      correctAnswer = e.target.value;\n    }\n    if (e.target.defaultValue === \"incorrect\") {\n      // option= e.target.value\n    }\n  }\n  function handleAddMoreQs(e) {\n    e.preventDefault();\n    setAddQs(true);\n  }\n  function handleAddOption(e, qn) {\n    e.preventDefault();\n    // setAddOpt(true)\n    // setQn(qn)\n    // setOptions(qn.optionmethod)\n  }\n\n  function handleChange(e, qn) {\n    if (e.target.id === \"option\") {\n      newOptionInput = e.target.value;\n    }\n    if (e.target.id === \"Optioncorrect\") {\n      correctAnswer = e.target.value;\n    }\n  }\n  function handleChangeNewOption(e) {\n    e.preventDefault();\n    if (e.target.defaultValue === \"Y/N\") {\n      if (e.target.value === \"N\") {\n        correctAnswer = false;\n      } else {\n        correctAnswer = true;\n      }\n    }\n    if (e.target.defaultValue === \"Enter option\") {\n      newOptionInput = e.target.value;\n    }\n  }\n  function handleEditOptions(e, qn) {\n    // setQuestion(qn)\n    // setOptions(qn.optionmethod)\n  }\n  function handleSaveNewOption(e) {\n    e.preventDefault();\n    // setAddOpt(false)\n    fetch(\"/options\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        question_id: qn.id,\n        text: newOptionInput,\n        correct: correctAnswer\n      })\n    }).then(r => r.json()).then(newO => {\n      //   setOptions([...options, newO])\n      //   setAddOpt(false)\n    });\n  }\n  function handleDeleteOption(e, o) {\n    e.preventDefault();\n    //delete request for o\n    //option and question state updates all happen from Adminpage\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n_s(Questions, \"xTw0fdss4rcM8jhjblbnLXUrRhw=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","Questions","i","setI","addQs","setAddQs","qs","setQs","questions","handlePostQ","e","preventDefault","handleNewQInput","target","defaultValue","qText","value","correctAnswer","handleAddMoreQs","handleAddOption","qn","handleChange","id","newOptionInput","handleChangeNewOption","handleEditOptions","handleSaveNewOption","fetch","method","headers","body","JSON","stringify","question_id","text","correct","then","r","json","newO","handleDeleteOption","o"],"sources":["/Users/kstabile/backup-phase-5/client/src/Components/Questions.js"],"sourcesContent":["import React, { useState } from \"react\"; \n// import Options from \"./Options\";\n\nfunction Questions({ i, setI }) {\n    const [addQs, setAddQs] = useState(false);\n    const [qs, setQs] = useState(i.questions);\n  \n    \n    \n    // function handleUpdate(e){\n    //     e.preventDefault();\n    //     // fetch(`/questions/${q.id}`, {\n    //     //     method: \"PATCH\",\n    //     //     headers: {\n    //     //         \"Content-Type\": \"application/json\",\n    //     //     },\n    //     //     body: JSON.stringify({ q }),\n    //     // })\n    //     // .then((r) => r.json())\n    //     // .then((updatedQ) => setQ([...questions.filter(quest => quest.id !== updatedQ.id), updatedQ]))\n    // }\n    // function handleDelete(e){\n    //     e.preventDefault();\n    //     // fetch(`/questions/${q.id}`, { \n    //     //     method: 'DELETE'\n    //     // })\n    //     // setQ(questions.filter(quest => quest.id !== q.id))\n    // }\n    function handlePostQ(e) {\n        e.preventDefault();\n        // let questiontext = qText\n        // let information_id = i.id\n        // fetch(`/newquestion`, {\n        //     method: \"POST\", \n        //     headers: {\n        //         \"Content-Type\": \"application/json\"\n        //     },\n        //     body: JSON.stringify({ information_id, questiontext }),\n        // })\n        // .then((r) => r.json())\n        // .then((newQ) => {\n        //     if (questions.length > 0) {\n        //         setQuestions([...questions, newQ])\n        //         //make sure this renders right away == may need a callback fn from Adminpage\n        //     }\n        //     else {\n        //         setQuestions(newQ)\n        //     }\n        //     setAddQs(false)\n        // })\n    }\n    function handleNewQInput(e) {\n        e.preventDefault();\n        if (e.target.defaultValue === \"text\") {\n            qText= e.target.value\n        }\n        if (e.target.defaultValue === \"correct\") {\n            correctAnswer= e.target.value\n        }\n        if (e.target.defaultValue === \"incorrect\") {\n            // option= e.target.value\n        }\n    }\n    function handleAddMoreQs(e) {\n        e.preventDefault();\n        setAddQs(true);\n    }\n    function handleAddOption(e, qn) {\n        e.preventDefault();\n        // setAddOpt(true)\n        // setQn(qn)\n        // setOptions(qn.optionmethod)\n    }\n        function handleChange(e, qn) {\n        if (e.target.id === \"option\"){\n            newOptionInput = e.target.value\n        }\n        if (e.target.id === \"Optioncorrect\") {\n            correctAnswer = e.target.value\n        }\n    }\n    function handleChangeNewOption(e) {\n        e.preventDefault();\n        if (e.target.defaultValue === \"Y/N\") {\n          if (e.target.value === \"N\"){\n            correctAnswer = false;\n          }\n          else {\n            correctAnswer = true;\n          }\n        }\n        if (e.target.defaultValue === \"Enter option\") {\n            newOptionInput = e.target.value\n        }\n    }\n    function handleEditOptions(e, qn){\n        // setQuestion(qn)\n        // setOptions(qn.optionmethod)\n    }\n    function handleSaveNewOption(e) {\n        e.preventDefault();\n        // setAddOpt(false)\n        fetch(\"/options\", {\n            method: \"POST\",\n            headers: {\n            \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n            question_id: qn.id,\n            text: newOptionInput,\n            correct: correctAnswer\n            }),\n        })\n        .then((r) => r.json())\n        .then((newO) => {\n        //   setOptions([...options, newO])\n        //   setAddOpt(false)\n        })\n    }\n    function handleDeleteOption(e, o) {\n        e.preventDefault();\n        //delete request for o\n        //option and question state updates all happen from Adminpage\n    }\n    return (\n        <div>\n     \n    </div>\n    )\n}\n\n\nexport default Questions; "],"mappings":"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"},"metadata":{},"sourceType":"module"}